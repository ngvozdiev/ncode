syntax = "proto3";
import "net.proto";

package ncode.dfs;

message PBConstraint {
  enum Type {
    UNKNOWN = 0;
    DUMMY = 1;
    AVOID_EDGE = 2;
    AVOID_VERTEX = 3;
    AND = 4;
    OR = 5;
    AVOID_PATH = 6;
    DEPREF_EDGE = 7;
    DEPREF_VERTEX = 8;
    VISIT_EDGE = 9;
    VISIT_VERTEX = 10;
    VISIT_EDGES_IN_ORDER = 11;
    VISIT_VERTICES_IN_ORDER = 12;
    VISIT_SUBPATH = 13;
    NEGATE = 14;
    ZONE = 15;
  }
  
  Type type = 1;
  
  PBAvoidEdgeConstraint avoid_edge_constraint = 2;
  PBAvoidVertexConstraint avoid_vertex_constraint = 3;
  PBAndConstraint and_constraint = 4;
  PBOrConstraint or_constraint = 5;
  PBAvoidPathConstraint avoid_path_constraint = 6;
  PBDeprefEdgeConstraint depref_edge_constraint = 7;
  PBDeprefVertexConstraint depref_vertex_constraint = 8;
  PBVisitEdgeConstraint visit_edge_constraint = 9;
  PBVisitVertexConstraint visit_vertex_constraint = 10;
  PBVisitEdgesInOrderConstraint visit_edges_in_order_constraint = 11;
  PBVisitVerticesInOrderConstraint visit_vertices_in_order_constraint = 12;
  PBNegateConstraint negate_constraint = 14;
}

message PBNegateConstraint {
  PBConstraint constraint = 1;
}

message PBVisitVerticesInOrderConstraint {
  repeated string vertices = 1;
}

message PBVisitEdgesInOrderConstraint {
  repeated net.PBGraphLink edges = 1;
}

message PBVisitVertexConstraint {
  string id = 1;
}

message PBVisitEdgeConstraint {
  net.PBGraphLink edge = 1;
}

message PBDeprefVertexConstraint {
  string id = 1;
}

message PBDeprefEdgeConstraint {
  net.PBGraphLink edge = 1;
}

message PBAvoidPathConstraint {
  repeated net.PBGraphLink path = 1;
}

message PBAvoidEdgeConstraint {
  net.PBGraphLink edge = 1;
}

message PBAvoidVertexConstraint {
  string id = 1;
}

message PBAndConstraint {
  PBConstraint op_one = 1;
  PBConstraint op_two = 2;
}

message PBOrConstraint {
  PBConstraint op_one = 1;
  PBConstraint op_two = 2;
}

message PBDFSRequest {
  uint32 max_depth_hops = 1; 
  uint32 max_depth_metric = 2;
  uint32 max_duration_ms = 3;
  uint32 steps_to_check_for_stop = 4;
  string src = 5;

  // Whether or not to produce node-disjoint paths.
  // By default paths are edge-disjoint.
  bool node_disjoint = 6;
}

message SrcDstPairPathCacheStats {
  string src = 1;
  string dst = 2;

  // Total number of paths in the cache for this src/dst pair.
  uint32 num_paths = 3;

  // A 100 values representing the percentiles of the distribution of
  // path latencies in seconds.
  repeated double path_length_sec_distribution = 4;

  // A 100 values representing the percentiles of the distribution of
  // path lengths in hops.
  repeated uint32 path_length_hops_distribution = 5;
}

// Statistics about the path cache.
message PathCacheStats {
  // Total number of paths in the cache.
  uint64 num_paths = 1;

  // Estimate for the total number of bytes used by the cache.
  uint64 bytes_used = 2;

  // A 100 values representing the percentiles of the distribution of
  // path latencies in seconds. For all paths in the cache.
  repeated double path_length_sec_distribution = 3;

  // A 100 values representing the percentiles of the distribution of
  // path lengths in hops. For all paths in the cache.
  repeated uint32 path_length_hops_distribution = 4;
  
  // Statistics about the src/dst pairs.
  repeated SrcDstPairPathCacheStats src_dst_pair_stats = 5;
}